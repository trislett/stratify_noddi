#!/usr/bin/env python

import os
import amico
import argparse as ap
import numpy as np
import nibabel as nib
from ants_tbss.functions import antsLinearRegCmd, antsNonLinearRegCmd, antsApplyTransformCmd, runCmd_log, antsBetCmd

DESCRIPTION = ""

def getArgumentParser(ap = ap.ArgumentParser(description = DESCRIPTION)):
	ap.add_argument("-s", "--subjid",
		nargs = 1,
		help = "Subject ID",
		metavar = ('str'),
		required = True)
	ap.add_argument("-dwi", "--dwipath",
		nargs = 3,
		help = "-dwi {bval} {bvec} {4d_image}",
		type = str,
		metavar = ('str'),
		required = True)
	ap.add_argument("-t1", "--t1path",
		nargs = 1,
		help = "-t1 {T1w_image}",
		type = str,
		metavar = ('str'),
		required = True)
	ap.add_argument("-nt", "--numthreads", 
		nargs=1,
		default=[2],
		type = int,
		help="multithreading")
	return ap

def run(opts):

#  ./IntegraMent_Mann_unwarp.py -s PIAM_12ZNM -dwi ../IntegraMent_MANN/PIAM_12ZNM/ses-2/dwi/PIAM_12ZNM_dwi.* -t1 ../IntegraMent_MANN/PIAM_12ZNM/ses-2/anat/PIAM_12ZNM_ses-2_T1w.nii.gz

	subject = opts.subjid[0]
	BVAL_path, BVEC_path, DWI_path = opts.dwipath
	T1w_path = opts.t1path[0]
	numthreads = opts.numthreads[0]

	DWI_path = os.path.abspath(DWI_path)
	BVEC_path = os.path.abspath(BVEC_path)
	BVAL_path = os.path.abspath(BVAL_path)
	T1w_path = os.path.abspath(T1w_path)

	runCmd_log("mkdir -p %s" % subject)
	os.chdir(subject)

	# clean-up and reprocess DWI
	runCmd_log("mkdir -p processed")

	DWI_base = os.path.basename(DWI_path)[:-7]

	runCmd_log("dwidenoise %s processed/%s_denoised.nii.gz -noise processed/noise.nii.gz" % (DWI_path, DWI_base))
	runCmd_log("dwi2mask -fslgrad %s %s processed/%s_denoised.nii.gz processed/%s_denoised_mask.nii.gz " % (BVEC_path, BVAL_path, DWI_base, DWI_base))
	runCmd_log("dwifslpreproc -fslgrad %s %s -rpe_none -pe_dir ap -export_grad_fsl processed/%s_eddy_dwi_unwarped.bvec processed/%s_eddy_dwi_unwarped.bval processed/%s_denoised.nii.gz processed/%s_eddy_dwi_unwarped.nii.gz" % (BVEC_path, BVAL_path, subject, subject, DWI_base, subject))

	assert os.path.exists("processed/%s_dwi_eddy_unwarped.nii.gz" % subject), "DWI preprocessing did not finish. Is GCC loaded?"

	# Brain extraction

	runCmd_log(antsBetCmd(numthreads = numthreads, input_image = T1w_path, output_image_brain = "processed/%s_" % subject))

	pdir_basename = os.getcwd() + "/"
	T1w_brain = pdir_basename + "processed/%s_BrainExtractionBrain.nii.gz" % subject
	DWI_processed = pdir_basename + "processed/%s_dwi_eddy_unwarped.nii.gz" % subject
	DWI_processed_BVAL = pdir_basename + "processed/%s_eddy_dwi_unwarped.bval" % subject
	DWI_processed_BVEC = pdir_basename + "processed/%s_eddy_dwi_unwarped.bvec" % subject

	bval = np.genfromtxt(DWI_processed_BVAL, delimiter=' ', dtype='int32')
	rounded_bval = np.around(bval, decimals=-3)

	# get the mean B0 images
	img = nib.load(DWI_processed)
	img_data = img.get_fdata()
	bzero_data = img_data[:,:,:,rounded_bval==0]
	nib.save(nib.nifti1.Nifti1Image(bzero_data.mean(3), header=img.header, affine=img.affine), "processed/mean_B0.nii.gz")
	runCmd_log("bet processed/mean_B0.nii.gz processed/mean_B0_brain.nii.gz -f .2")

	# linear registration of T1w_brain to B0_mean_brain
	ref = 'processed/mean_B0_brain.nii.gz'
	mov = T1w_brain
	out = 'processed/lin_T1w_to_B0.nii.gz'
	runCmd_log(antsLinearRegCmd(numthreads = numthreads, reference  = ref, mov = mov, out_basename = out, outdir=None, use_float=False))

	# non linear registration of B0_mean_brain to lin_T1w_to_B0.nii.gz
	ref = 'processed/lin_T1w_to_B0.nii.gz'
	mov = 'processed/mean_B0_brain.nii.gz'
	out = 'processed/B0_to_linT1.nii.gz'
	runCmd_log(antsNonLinearRegCmd(numthreads = numthreads, reference = ref,  mov=mov, out_basename = out, outdir = None, use_float = False))

	# apply transformation to DWI data
	warps = ["processed/B0_to_linT1.nii.gz_0Warp.nii.gz"]
	runCmd_log(antsApplyTransformCmd(reference = ref, mov = DWI_processed, warps = warps, outname = 'processed/DWI_preprocessed_to_linT1.nii.gz', inverse = False, multipleimages = True))

	runCmd_log("mkdir QC")
	runCmd_log("fslsplit processed/DWI_preprocessed_to_linT1.nii.gz QC/")
	runCmd_log("slicesdir -p processed/lin_T1w_to_B0.nii.gz QC/*")
	runCmd_log("rm -r QC")
	runCmd_log("mv slicesdir QC_unwarped_dwi")

	runCmd_log("fslmaths processed/lin_T1w_to_B0.nii.gz -bin processed/lin_T1w_to_B0_mask.nii.gz")
	runCmd_log("fslmaths processed/lin_T1w_to_B0.nii.gz -bin -ero processed/lin_T1w_to_B0_mask_ero1.nii.gz")

	# Calculate DTI metrics
	runCmd_log("dtifit -k processed/DWI_preprocessed_to_linT1.nii.gz -r %s -b %s -m processed/lin_T1w_to_B0_mask.nii.gz -o processed/%s_Fdti" % (BVEC_path, BVAL_path, subject))
	runCmd_log("fslmaths processed/%s_Fdti_MD.nii.gz -thr 0.0001 -recip processed/%s_Fdti_invMD.nii.gz" % (subject,subject))

	# NODDI
	noddi_dir = "processed/noddi"
	runCmd_log("mkdir -p " + noddi_dir)
	bval_file = DWI_processed_BVAL
	bvec_file = DWI_processed_BVEC
	dwi_file = pdir_basename + 'processed/DWI_preprocessed_to_linT1.nii.gz'
	dwi_mask_file = pdir_basename + "processed/lin_T1w_to_B0_mask.nii.gz"
	rounded_bval_outfile = pdir_basename + "processed/%s_rounded.bval" % (subject)
	os.chdir(noddi_dir)

	bvals = np.genfromtxt(bval_file, delimiter=' ', dtype='int32')
	rounded_bval = np.around(bvals, decimals=-3)
	np.savetxt(rounded_bval_outfile, rounded_bval, delimiter='', newline=' ', fmt='%i')

	runCmd_log("zcat %s > subject4d.nii" % (dwi_file))
	runCmd_log("zcat %s > mask.nii" % (dwi_mask_file))

	amico.core.setup()
	scheme_name = ("amico.scheme")
	amico.util.fsl2scheme(rounded_bval_outfile,bvec_file, schemeFilename=scheme_name)
	ae = amico.Evaluation("","")
	ae.load_data(dwi_filename = "subject4d.nii", scheme_filename = "amico.scheme", mask_filename = "mask.nii", b0_thr = 0)
	ae.set_model("NODDI")
	ae.generate_kernels(regenerate = True)
	ae.load_kernels()
	ae.fit()
	ae.save_results()
#	for metric in ['ICVF','OD', 'ISOVF']:
#		os.system("cp AMICO/NODDI/FIT_%s.nii.gz %s/%s_Fdti_%s.nii.gz" % (metric, processdwi, subid, metric))
#	os.system("rm -rf mask.nii subject4d.nii kernels")

if __name__ == "__main__":
	parser = getArgumentParser()
	opts = parser.parse_args()
	run(opts)

