#!/usr/bin/env python

import os
import json
import glob
import argparse as ap
import numpy as np
import nibabel as nib
import dipy.reconst.dti as dti
from dipy.reconst.dti import fractional_anisotropy, mean_diffusivity, radial_diffusivity, axial_diffusivity,mode
import dipy.denoise.noise_estimate as ne
import dipy.io as io
import dipy.core.gradients as cg

from stratify_noddi.functions import antsLinearRegCmd, antsNonLinearRegCmd, antsApplyTransformCmd, runCmd_log, antsBetCmd, check_dwi_files, generate_qc_tsv

DESCRIPTION = "Multi-shell DWI and NODDI Processing script for IMAGEN FU3 and STRATIFY"

def getArgumentParser(ap = ap.ArgumentParser(description = DESCRIPTION)):
	ap.add_argument("-s", "--subjid",
		nargs = 1,
		help = "Subject ID",
		metavar = ('str'),
		required = True)
	ap.add_argument("-dwi", "--dwipath",
		nargs = "+",
		help = "-dwi {bval} {bvec} {4D_dwiimage}. E.g., -dwi path/to/sub-TEST.*",
		type = str,
		metavar = ('str'),
		required = True)
	ap.add_argument("-t1", "--t1path",
		nargs = 1,
		help = "-t1 {T1w_image}",
		type = str,
		metavar = ('str'),
		required = True)
	ap.add_argument("-rr", "--runrestore",
		help = "Use RESTORE for robust tensor fitting",
		action = "store_true")
	ap.add_argument("-nt", "--numthreads", 
		nargs=1,
		default=[2],
		type = int,
		help="Multithreading (default: %(default)s). Only partially implemented")
	return ap

#Naming template
#{subject}_dti.mif	
#{subject}_dti_denoised.mif	
#{subject}_dti_noise.mif	
#{subject}_dti_denoised_degibbsed.mif	
#{subject}_dti_denoised_degibbsed_preprocessed.mif	
#eddy_qc
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected.mif	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_mask.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_tensor.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_fa.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_md.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_ad.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_rd.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_L1.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_L2.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_L3.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_V1.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_V2.nii.gz	
#{subject}_dti_denoised_degibbsed_preprocessed_biascorrected_V3.nii.gz	


def run(opts):

	subject = opts.subjid[0]
	BVAL_path = check_dwi_files(opts.dwipath, ".bval")
	BVEC_path = check_dwi_files(opts.dwipath, ".bvec")
	DWI_path = check_dwi_files(opts.dwipath, ".nii.gz")
	numthreads = opts.numthreads[0]

	
	# list of intermediate files for cleanup
	intermediate_files = []

	if opts.t1path:
		T1w_path = opts.t1path[0]
		T1w_path = os.path.abspath(T1w_path)
	DWI_path = os.path.abspath(DWI_path)
	BVEC_path = os.path.abspath(BVEC_path)
	BVAL_path = os.path.abspath(BVAL_path)

	runCmd_log("mkdir -p %s" % subject)
	os.chdir(subject)
	pdir_basename = os.getcwd() + "/"

	# copy and rename dwi
	runCmd_log("mkdir -p processed")
	
	# declare names
	DWI = pdir_basename + "processed/%s_dti.nii.gz" % subject
	BVAL = pdir_basename + "processed/%s_dti.bval" % subject
	BVEC = pdir_basename + "processed/%s_dti.bvec" % subject
	MIF = pdir_basename + "processed/%s_dti.mif" % subject

	# copy nifti
	runCmd_log("cp %s %s" % (DWI_path, DWI))
	runCmd_log("cp %s %s" % (BVAL_path, BVAL))
	runCmd_log("cp %s %s" % (BVEC_path, BVEC))
	runCmd_log("mrconvert -fslgrad %s %s %s %s" % (BVEC_path, BVAL_path, DWI_path, MIF))

	if opts.t1path:
		T1W = pdir_basename + "processed/%s_T1w.nii.gz" % subject
		runCmd_log("cp %s %s" % (T1w_path, T1W))

	# declare names
	DWI_DN = pdir_basename + "processed/%s_dti_denoised.mif" % subject
	intermediate_files.append(DWI_DN)
	DWI_DN_NOISE = pdir_basename + "processed/%s_noise.mif" % subject
	intermediate_files.append(DWI_DN_NOISE)
	DWI_DN_DG = pdir_basename + "processed/%s_dti_denoised_degibbsed.mif" % subject
	intermediate_files.append(DWI_DN_DG)
	
	# denoise. 
	runCmd_log("dwidenoise %s %s -noise %s" % (DWI, DWI_DN, DWI_DN_NOISE))
	# degibbs.
	runCmd_log("mrdegibbs %s %s" % (DWI_DN, DWI_DN_DG))
	# make mask (useful for checking) ... could be used in dwifslpreproc
	runCmd_log("dwi2mask %s processed/%s_dti-mask.nii.gz " % (MIF, subject))

	# round the bval for NODDI/indexing
	DWI_DN_EDDY_BVAL_ROUNDED = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_rounded.bval" % subject
	bval = np.genfromtxt(BVAL, delimiter=' ', dtype=int)
	rounded_bval = np.around(bval, decimals=-2)
	# output round bval which is later used for amico
	np.savetxt(DWI_DN_EDDY_BVAL_ROUNDED, rounded_bval, delimiter='', newline=' ', fmt='%i')

	if opts.t1path:
		# EDDY
		# declare names
		DWI_DN_EDDY = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed.nii.gz" % subject
		DWI_DN_EDDY_BVEC = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed.bvec" % subject
		DWI_DN_EDDY_BVAL = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed.bval" % subject
	
		# Unwarping using T1w image 
		runCmd_log("dwifslpreproc -fslgrad %s %s -rpe_none -pe_dir ap -export_grad_fsl %s %s %s %s -nthreads %d -eddy_options ' --slm=linear '" % (BVEC, BVAL,
										DWI_DN_EDDY_BVEC, DWI_DN_EDDY_BVAL,
										DWI_DN_DG, DWI_DN_EDDY, numthreads))


		assert os.path.exists(DWI_DN_EDDY), "DWI preprocessing did not finish. Is GCC loaded?"

		# N4 bias field correction for T1w image
		T1W_N4 = pdir_basename + "processed/%s_T1w_bfc.nii.gz" % subject
		runCmd_log("N4BiasFieldCorrection -d 3 -i %s -o %s" % (T1W, T1W_N4))

		# ANTS brain extraction; antsbet does do a N4bfc, but this way makes sure that the structural template is unbiased for registration. Unlikely to have much of an effect w/ or w/out N4...
		runCmd_log(antsBetCmd(numthreads = numthreads, input_image = T1W_N4, output_image_brain = "processed/%s_T1w_bfc_" % subject))

		# declare names
		T1w_brain = pdir_basename + "processed/%s_T1w_bfc_BrainExtractionBrain.nii.gz" % subject


		# get the mean B0 images
		img = nib.load(DWI_DN_EDDY)
		img_data = img.get_fdata()
		bzero_data = img_data[:,:,:,rounded_bval==0]

		# declare names
		DWI_DN_EDDY_B0_MEAN = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_b0_mean.nii.gz" % subject
		DWI_DN_EDDY_B0_MEAN_BRAIN = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_b0_mean_brain.nii.gz" % subject

		nib.save(nib.nifti1.Nifti1Image(bzero_data.mean(3), header=img.header, affine=img.affine), DWI_DN_EDDY_B0_MEAN)
		runCmd_log("bet %s %s -f .2" % (DWI_DN_EDDY_B0_MEAN, DWI_DN_EDDY_B0_MEAN_BRAIN))

		# linear registration of T1w_brain to B0_mean_brain
		ref = DWI_DN_EDDY_B0_MEAN_BRAIN
		mov = T1w_brain
		out = 'processed/lin_T1w_to_b0.nii.gz'
		runCmd_log(antsLinearRegCmd(numthreads = numthreads,
											reference  = ref,
											mov = mov,
											out_basename = out,
											outdir = None,
											use_float=False))

		# non linear registration of B0_mean_brain to lin_T1w_to_b0.nii.gz
		ref = 'processed/lin_T1w_to_b0.nii.gz'
		mov = DWI_DN_EDDY_B0_MEAN_BRAIN
		out = 'processed/b0_to_linT1.nii.gz'
		runCmd_log(antsNonLinearRegCmd(numthreads = numthreads,
												reference = ref,
												mov = mov,
												out_basename = out,
												outdir = None,
												use_float = False))

		# apply transformation to DWI data
		# declare names
		DWI_DN_EDDY_DC = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed.nii.gz" % subject
		warps = ["processed/b0_to_linT1.nii.gz_0Warp.nii.gz"]
		runCmd_log(antsApplyTransformCmd(reference = ref,
													mov = DWI_DN_EDDY,
													warps = warps,
													outname = DWI_DN_EDDY_DC,
													inverse = False, multipleimages = True))

		# subject_dti-AP_ecc_dc_mask. Note: I'm using the linear transformed T1w mask to avoid fitting outside the unwarping area
		# declare names
		DWI_DN_EDDY_DC_MASK = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_mask.nii.gz" % subject
		DWI_DN_EDDY_DC_ERO1 = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_mask_ero1.nii.gz" % subject
		runCmd_log("fslmaths processed/lin_T1w_to_b0.nii.gz -bin %s" % DWI_DN_EDDY_DC_MASK)
		runCmd_log("fslmaths processed/lin_T1w_to_b0.nii.gz -bin -ero %s" % DWI_DN_EDDY_DC_ERO1)

		runCmd_log("mkdir QC")
		runCmd_log("fslsplit %s QC/" % DWI_DN_EDDY_DC)
		runCmd_log("slicesdir -p processed/lin_T1w_to_b0.nii.gz QC/*")
		runCmd_log("rm -r QC")
		runCmd_log("mv slicesdir processed/QC_unwarped_dwi")

		DWI_DN_EDDY_DC_BC = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected.nii.gz" % subject
		DWI_DN_EDDY_DC_BC_MASK = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_mask.nii.gz" % subject
		DWI_DN_EDDY_DC_BC_TENSOR = pdir_basename + "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_tensor.nii.gz" % subject

		runCmd_log("dwibiascorrect ants -fslgrad %s %s %s %s" % (DWI_DN_EDDY_BVEC, DWI_DN_EDDY_BVAL, DWI_DN_EDDY_DC, DWI_DN_EDDY_DC_BC))

		# MRTrix's dwi mask
		runCmd_log("dwi2mask -fslgrad %s %s %s %s" % (DWI_DN_EDDY_BVEC, DWI_DN_EDDY_BVAL, DWI_DN_EDDY_DC_BC, DWI_DN_EDDY_DC_BC_MASK))
		runCmd_log("dwi2tensor -mask %s -fslgrad %s %s %s %s" % (DWI_DN_EDDY_DC_BC_MASK, DWI_DN_EDDY_BVEC, DWI_DN_EDDY_BVAL, DWI_DN_EDDY_DC_BC, DWI_DN_EDDY_DC_BC_TENSOR))
		for m in ['md', 'fa', 'ad', 'rd']:
			if m = 'md':
				runCmd_log("tensor2metric -%s processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_%s.nii.gz -mask %s %s" % ('adc', subject, m, DWI_DN_EDDY_DC_BC_MASK, DWI_DN_EDDY_DC_BC_TENSOR))
			else:
				runCmd_log("tensor2metric -%s processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_%s.nii.gz -mask %s %s" % (m, subject, m, DWI_DN_EDDY_DC_BC_MASK, DWI_DN_EDDY_DC_BC_TENSOR))

		# this seems to copy vector three times... check.
		for i in [1, 2, 3]:
			runCmd_log("tensor2metric -value processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_L%d.nii.gz -num %d -mask %s %s" % (subject, i, i, DWI_DN_EDDY_DC_BC_MASK, DWI_DN_EDDY_DC_BC_TENSOR))
			runCmd_log("tensor2metric -vector processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_V%d.nii.gz -num %d -mask %s %s" % (subject, i, i, DWI_DN_EDDY_DC_BC_MASK, DWI_DN_EDDY_DC_BC_TENSOR))

		# calculate the inverted MD image
		runCmd_log("fslmaths processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_md.nii.gz -thr 0.0001 -recip processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_invmd.nii.gz" % (subject, subject))

	# option to run restore. I'm going to use the B0 mask because dwi2mask cuts out too much grey matter.
	if opts.runrestore:
		# adapted from https://github.com/imagen2/imagen_processing/blob/master/fsl_dti/restore.py
		# dipy page: http://nipy.org/dipy/examples_built/restore_dti.html
		# load dti data
		img = nib.load(DWI_DN_EDDY_DC_BC)
		# is this really necessary? why not just used the masked data?
		dataraw = img.get_fdata()
		maskdata = nib.load(DWI_DN_EDDY_DC_BC_MASK).get_fdata()
		data = img.get_fdata()
		data[maskdata!=1] = 0
		bvals, bvecs = io.read_bvals_bvecs(DWI_DN_EDDY_BVAL, DWI_DN_EDDY_BVEC)
		# load bvec and bvals
		gtab = cg.gradient_table(bvals, bvecs)
		# noise estimation from the b=0
		sigma = ne.estimate_sigma(dataraw[:,:,:,bvals==0])
		sigmamean = np.mean(sigma)
		# tensor computation using restore
		tenmodel = dti.TensorModel(gtab, fit_method='RESTORE', sigma=sigmamean)
		tenfit = tenmodel.fit(dataraw, maskdata)

		FA = fractional_anisotropy(tenfit.evals)
		MD = mean_diffusivity(tenfit.evals)
		AD = axial_diffusivity(tenfit.evals)
		RD = radial_diffusivity(tenfit.evals)
		MO = mode(tenfit.evecs)

		# change output names to use '-' instead of '_' so there isn't an issues with the QC
		tenfit.evals[np.isnan(tenfit.evals)] = 0
		evals1_img = nib.Nifti1Image(tenfit.evals[:,:,:,0].astype(np.float32), img.affine)
		nib.save(evals1_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_L1.nii.gz" % subject)
		evals2_img = nib.Nifti1Image(tenfit.evals[:,:,:,1].astype(np.float32), img.affine)
		nib.save(evals2_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_L2.nii.gz" % subject)
		evals3_img = nib.Nifti1Image(tenfit.evals[:,:,:,2].astype(np.float32), img.affine)
		nib.save(evals3_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_L3.nii.gz" % subject)

		tenfit.evecs[np.isnan(tenfit.evecs)] = 0
		evecs_img1 = nib.Nifti1Image(tenfit.evecs[:,:,:,:,0].astype(np.float32), img.affine)
		nib.save(evecs_img1, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_V1.nii.gz" % subject)
		evecs_img2 = nib.Nifti1Image(tenfit.evecs[:,:,:,:,1].astype(np.float32), img.affine)
		nib.save(evecs_img2, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_V2.nii.gz" % subject)
		evecs_img3 = nib.Nifti1Image(tenfit.evecs[:,:,:,:,2].astype(np.float32), img.affine)
		nib.save(evecs_img3, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_V3.nii.gz" % subject)

		FA[np.isnan(FA)] = 0
		FA[maskdata!=1] = 0
		fa_img = nib.Nifti1Image(FA.astype(np.float32), img.affine)
		nib.save(fa_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_fa.nii.gz" % subject)

		MD[np.isnan(MD)] = 0
		MD[maskdata!=1] = 0
		md_img = nib.Nifti1Image(MD.astype(np.float32), img.affine)
		nib.save(md_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_md.nii.gz" % subject)

		AD[np.isnan(AD)] = 0
		AD[maskdata!=1] = 0
		ad_img = nib.Nifti1Image(RD.astype(np.float32), img.affine)
		nib.save(ad_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_ad.nii.gz" % subject)

		RD[np.isnan(RD)] = 0
		RD[maskdata!=1] = 0
		rd_img = nib.Nifti1Image(RD.astype(np.float32), img.affine)
		nib.save(rd_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_rd.nii.gz" % subject)

		MO[np.isnan(MO)] = 0
		MO[maskdata!=1] = 0
		mo_img = nib.Nifti1Image(MO.astype(np.float32), img.affine)
		nib.save(mo_img, "processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_mo.nii.gz" % subject)

		runCmd_log("fslmaths processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_md.nii.gz -thr 0.0001 -recip processed/%s_dti_denoised_degibbsed_preprocessed_biascorrected_restore_invmd.nii.gz" % (subject, subject))


	# pre-TBSS STUFF
	if opts.runrestore:
		base = '_dti_denoised_degibbsed_preprocessed_biascorrected_restore_'
	else:
		base = '_dti_denoised_degibbsed_preprocessed_biascorrected_'

	# FA to template
	# standard image 
	template_brain = '%s/data/standard/FMRIB58_FA_1mm.nii.gz' % os.environ['FSLDIR']
	
	
	metric_loc = "processed/%s%s%s.nii.gz" % (subject, base, 'fa')
	
	runCmd_log("mkdir -p transformed")
	
	# B0 to T1w native
	ref = template_brain
	mov = metric_loc
	out = 'transformed/lin_fa_to_template.nii.gz'
	runCmd_log(antsLinearRegCmd(numthreads = numthreads,
										reference  = ref,
										mov = mov,
										out_basename = out,
										outdir = None,
										use_float=False))

	# non linear registration of lin_b0_to_T1w to T1w_brain
	ref = template_brain
	mov = 'transformed/lin_fa_to_template.nii.gz'
	out = 'transformed/fa_to_template.nii.gz'
	runCmd_log(antsNonLinearRegCmd(numthreads = numthreads,
										reference = ref,
										mov = mov,
										out_basename = out,
										outdir = None,
										use_float = False))

	warps = ["transformed/lin_fa_to_template.nii.gz_0GenericAffine.mat", "transformed/fa_to_template.nii.gz_0Warp.nii.gz"]
	for metric in ['fa', 'md', 'invmd', 'rd', 'ad']:
		metric_loc = "processed/%s%s%s.nii.gz" % (subject, base, metric)
		metric_out = "transformed/%s%stomni_%s.nii.gz" % (subject, base, metric)
		runCmd_log(antsApplyTransformCmd(reference = template_brain,
													mov = metric_loc,
													warps = warps[::-1],
													outname = metric_out,
													inverse = False, multipleimages = False))

	tempdir = 'temp_%d' % np.random.randint(1000000)
	os.system("mkdir -p %s" % tempdir)
	os.chdir(tempdir)
	os.system("slicesdir -p %s ../transformed/%s%stomni_fa.nii.gz" % (template_brain, subject, base))
	os.system("mv slicesdir ../transformed/slicesdir")
	os.chdir("../")
	os.system("rm -r %s" % tempdir)

	DWI_METRICS = np.sort(glob.glob("processed/%s%s*.nii.gz" % (subject, base)))
	generate_qc_tsv(images = DWI_METRICS, outname = "%s_dwi-native_tf.log" % subject, sep = "\t", generate_histogram = True)

	DWI_METRICS = np.sort(glob.glob("transformed/%s%stomni_*.nii.gz" % (subject, base)))
	generate_qc_tsv(images = DWI_METRICS, outname = "%s_dwi-standard_tf.log" % subject, sep = "\t", generate_histogram = True)
	runCmd_log("slicesdir -p processed/lin_T1w_to_b0.nii.gz QC/*")

if __name__ == "__main__":
	parser = getArgumentParser()
	opts = parser.parse_args()
	run(opts)


